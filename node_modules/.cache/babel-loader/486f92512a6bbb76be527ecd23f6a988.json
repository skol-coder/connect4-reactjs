{"ast":null,"code":"export const generateNewBoard = () => [[null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null]];\nexport const deepCloneBoard = board => [[...board[0]], [...board[1]], [...board[2]], [...board[3]], [...board[4]], [...board[5]], [...board[6]], [...board[7]]]; // for real tho...all credit for this super optimized logic belongs here: Jeff Leu circa November 23, 2016\n\nconst checkVertical = board => {\n  // Check only if row is 3 or greater\n  for (let r = 3; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c] && board[r][c] === board[r - 2][c] && board[r][c] === board[r - 3][c]) {\n          const data = {\n            playerWon: board[r][c],\n            winningCombination: [[r, c], [r - 1, c], [r - 2, c], [r - 3, c]]\n          };\n          return data;\n        }\n      }\n    }\n  }\n};\n\nconst checkHorizontal = board => {\n  // Check only if column is 3 or less\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 5; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r][c + 1] && board[r][c] === board[r][c + 2] && board[r][c] === board[r][c + 3]) {\n          const data = {\n            playerWon: board[r][c],\n            winningCombination: [[r, c], [r, c + 1], [r, c + 2], [r, c + 3]]\n          };\n          return data;\n        }\n      }\n    }\n  }\n};\n\nconst checkDiagonalRight = board => {\n  // Check only if row is 3 or greater AND column is 3 or less\n  for (let r = 3; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      //4->8\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c + 1] && board[r][c] === board[r - 2][c + 2] && board[r][c] === board[r - 3][c + 3]) {\n          const data = {\n            playerWon: board[r][c],\n            winningCombination: [[r, c], [r - 1, c + 1], [r - 2, c + 2], [r - 3, c + 3]]\n          };\n          return data;\n        }\n      }\n    }\n  }\n};\n\nconst checkDiagonalLeft = board => {\n  // Check only if row is 3 or greater AND column is 3 or greater\n  for (let r = 3; r < 8; r++) {\n    for (let c = 3; c < 8; c++) {\n      if (board[r][c]) {\n        if (board[r][c] === board[r - 1][c - 1] && board[r][c] === board[r - 2][c - 2] && board[r][c] === board[r - 3][c - 3]) {\n          const data = {\n            playerWon: board[r][c],\n            winningCombination: [[r, c], [r - 1, c - 1], [r - 2, c - 2], [r - 3, c - 3]]\n          };\n          return data;\n        }\n      }\n    }\n  }\n};\n\nconst checkDraw = board => {\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      if (board[r][c] === null) {\n        return null;\n      }\n    }\n  } // return 'draw'\n\n};\n\nexport const checkForWin = board => {\n  return checkVertical(board) || checkDiagonalRight(board) || checkDiagonalLeft(board) || checkHorizontal(board) || checkDraw(board);\n};","map":{"version":3,"sources":["D:/TP/Connect4-reactjs/connect4-reactjs/src/GameLogic.tsx"],"names":["generateNewBoard","deepCloneBoard","board","checkVertical","r","c","data","playerWon","winningCombination","checkHorizontal","checkDiagonalRight","checkDiagonalLeft","checkDraw","checkForWin"],"mappings":"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","sourcesContent":["\r\nexport const generateNewBoard = () => [\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null]\r\n  ]\r\n\r\n  export const deepCloneBoard = (board:any) => [\r\n    [...board[0]],\r\n    [...board[1]],\r\n    [...board[2]],\r\n    [...board[3]],\r\n    [...board[4]],\r\n    [...board[5]],\r\n    [...board[6]],\r\n    [...board[7]]\r\n  ]\r\n  \r\n  // for real tho...all credit for this super optimized logic belongs here: Jeff Leu circa November 23, 2016\r\n  const checkVertical = (board:any) => {\r\n    // Check only if row is 3 or greater\r\n    for (let r = 3; r < 8; r++) {\r\n      for (let c = 0; c < 8; c++) {\r\n        if (board[r][c]) {\r\n          if (\r\n            board[r][c] === board[r - 1][c] &&\r\n            board[r][c] === board[r - 2][c] &&\r\n            board[r][c] === board[r - 3][c]\r\n          ) {\r\n            const data = {playerWon:board[r][c], winningCombination:[[r, c],[r-1, c], [r-2, c], [r-3, c]]};\r\n            return data;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  const checkHorizontal = (board:any) => {\r\n    // Check only if column is 3 or less\r\n    for (let r = 0; r < 8; r++) {\r\n      for (let c = 0; c < 5; c++) {\r\n        if (board[r][c]) {\r\n          if (\r\n            board[r][c] === board[r][c + 1] &&\r\n            board[r][c] === board[r][c + 2] &&\r\n            board[r][c] === board[r][c + 3]\r\n          ) {\r\n            const data = {playerWon:board[r][c], winningCombination:[[r, c],[r, c+1], [r, c+2], [r, c+3]]};\r\n            return data;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  const checkDiagonalRight = (board:any) => {\r\n    // Check only if row is 3 or greater AND column is 3 or less\r\n    for (let r = 3; r < 8; r++) {\r\n      for (let c = 0; c < 8; c++) { //4->8\r\n        if (board[r][c]) {\r\n          if (\r\n            board[r][c] === board[r - 1][c + 1] &&\r\n            board[r][c] === board[r - 2][c + 2] &&\r\n            board[r][c] === board[r - 3][c + 3]\r\n          ) {\r\n            const data = {playerWon:board[r][c], winningCombination:[[r, c],[r-1, c+1], [r-2, c+2], [r-3, c+3]]};\r\n            return data;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  const checkDiagonalLeft = (board:any) => {\r\n    // Check only if row is 3 or greater AND column is 3 or greater\r\n    for (let r = 3; r < 8; r++) {\r\n      for (let c = 3; c < 8; c++) {\r\n        if (board[r][c]) {\r\n          if (\r\n            board[r][c] === board[r - 1][c - 1] &&\r\n            board[r][c] === board[r - 2][c - 2] &&\r\n            board[r][c] === board[r - 3][c - 3]\r\n          ) {\r\n            const data = {playerWon:board[r][c], winningCombination:[[r, c],[r-1, c-1], [r-2, c-2], [r-3, c-3]]};\r\n            return data;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  const checkDraw = (board:any) => {\r\n    for (let r = 0; r < 8; r++) {\r\n      for (let c = 0; c < 8; c++) {\r\n        if (board[r][c] === null) {\r\n          return null\r\n        }\r\n      }\r\n    }\r\n    // return 'draw'\r\n  }\r\n  \r\n  export const checkForWin = (board:any) => {\r\n    return (\r\n      checkVertical(board) ||\r\n      checkDiagonalRight(board) ||\r\n      checkDiagonalLeft(board) ||\r\n      checkHorizontal(board) ||\r\n      checkDraw(board)\r\n    )\r\n  }"]},"metadata":{},"sourceType":"module"}