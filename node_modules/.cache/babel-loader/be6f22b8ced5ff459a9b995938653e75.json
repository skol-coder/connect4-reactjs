{"ast":null,"code":"var _jsxFileName = \"D:\\\\TP\\\\Connect4-reactjs\\\\connect4-reactjs\\\\src\\\\pages\\\\game\\\\Connect_4.tsx\",\n    _s = $RefreshSig$();\n\nimport './Connect_4.css';\nimport GamePlayerCard from '../../components/GamePlayerCard';\nimport Button from '../../components/Button';\nimport { useNavigate } from 'react-router-dom';\nimport { useReducer, useState } from 'react';\nimport { checkForWin, deepCloneBoard, generateNewBoard } from '../../GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet gameInitiated = false;\nconst initialGameState = {\n  player1: 1,\n  player2: 2,\n  currentPlayer: null,\n  board: [[null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null]],\n  gameOver: false,\n  message: ''\n};\n\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'newGame':\n      return { ...initialGameState,\n        board: action.board\n      };\n\n    case 'togglePlayer':\n      return { ...state,\n        currentPlayer: action.nextPlayer,\n        board: action.board\n      };\n\n    case 'endGame':\n      return { ...state,\n        gameOver: true,\n        message: action.message,\n        board: action.board\n      };\n\n    case 'updateMessage':\n      return { ...state,\n        message: action.message\n      };\n\n    default:\n      throw Error(`Action \"${action.type}\" is not a valid action.`);\n  }\n};\n\nfunction Connect_4(_ref) {\n  _s();\n\n  let {\n    player1Img,\n    player2Img,\n    player1,\n    player2,\n    score1,\n    score2,\n    setScore1,\n    setScore2,\n    gameNumber,\n    setGameNumber\n  } = _ref;\n  const [gameState, dispatchGameState] = useReducer(gameReducer, initialGameState);\n  const [currentMoveRow, setCurrentMoveRow] = useState(0);\n  const [currentMoveColumn, setCurrentMoveColumn] = useState(0);\n  const [showCongratulation, setshowCongratulation] = useState(false);\n  const [showNewGameButton, setshowNewGameButton] = useState(false);\n  const [undoButtonPressed, setundoButtonPressed] = useState(false);\n  const [Player1Class, setPlayer1Class] = useState('classForOrangeBorder');\n  const [Player2Class, setPlayer2Class] = useState('');\n  let board = deepCloneBoard(gameState.board);\n  let result = checkForWin(board); //triggered when clicked on circle\n\n  const play = c => {\n    if (!gameState.gameOver) {\n      var _result, _result2, _result3;\n\n      board = deepCloneBoard(gameState.board); //check if cell is taken by starting at the bottom row and working up\n\n      for (let r = 7; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = gameState.currentPlayer;\n          setCurrentMoveRow(r);\n          setCurrentMoveColumn(c);\n          console.log(board);\n          break;\n        }\n      } // Check status of board\n\n\n      result = checkForWin(board);\n\n      if (((_result = result) === null || _result === void 0 ? void 0 : _result.playerWon) === gameState.player1) {\n        displayCongratulationAndButton();\n        setScore1(score1 + 1);\n        gameNumber < 4 ? setGameNumber(gameNumber + 1) : dispatchGameState({\n          type: 'updateMessage',\n          message: 'Game Tournament Over'\n        });\n        dispatchGameState({\n          type: 'endGame',\n          message: 'Player1 (Green) wins!',\n          board\n        });\n      } else if (((_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.playerWon) === gameState.player2) {\n        displayCongratulationAndButton();\n        setScore2(score2 + 1);\n        gameNumber < 4 ? setGameNumber(gameNumber + 1) : dispatchGameState({\n          type: 'updateMessage',\n          message: 'Game Tournament Over'\n        });\n        dispatchGameState({\n          type: 'endGame',\n          message: 'Player2 (Yellow) wins!',\n          board\n        });\n      } else if (((_result3 = result) === null || _result3 === void 0 ? void 0 : _result3.playerWon) === 'draw') {\n        displayCongratulationAndButton();\n        gameNumber < 4 ? setGameNumber(gameNumber + 1) : dispatchGameState({\n          type: 'updateMessage',\n          message: 'Game Tournament Over'\n        });\n        dispatchGameState({\n          type: 'endGame',\n          message: 'Draw Game!',\n          board\n        });\n      } else {\n        let currentPlayerUndo = gameState.currentPlayer;\n\n        if (undoButtonPressed) {\n          const nextPlayer = currentPlayerUndo;\n          profileImgBorder(nextPlayer);\n          dispatchGameState({\n            type: 'togglePlayer',\n            nextPlayer,\n            board\n          });\n          setundoButtonPressed(false);\n        } else {\n          const nextPlayer = gameState.currentPlayer === gameState.player1 ? gameState.player2 : gameState.player1;\n          profileImgBorder(nextPlayer);\n          dispatchGameState({\n            type: 'togglePlayer',\n            nextPlayer,\n            board\n          });\n        }\n      }\n    } // it's gameover and a user clicked a cell\n    else {\n      dispatchGameState({\n        type: 'updateMessage',\n        message: 'Game Over. Please start a new game.'\n      });\n    }\n  };\n\n  function profileImgBorder(nextPlayer) {\n    if (nextPlayer === 1) {\n      setPlayer1Class('classForOrangeBorder');\n      setPlayer2Class('');\n    } else if (nextPlayer === 2) {\n      setPlayer1Class('');\n      setPlayer2Class('classForOrangeBorder');\n    }\n  }\n\n  function displayCongratulationAndButton() {\n    setshowCongratulation(true);\n    setshowNewGameButton(true);\n  } //REMOVE EVENT LISTENERS AND DOCUMENT.....================================================================\n  //Start new game\n\n\n  function newGameButtonHandler() {\n    if (gameNumber < 4) {\n      dispatchGameState({\n        type: 'newGame',\n        board: generateNewBoard()\n      });\n      setshowCongratulation(false);\n      setshowNewGameButton(false);\n    } else {\n      score1 > score2 ? alert(`Player 1 won please click on end tournament`) : score2 > score1 ? alert(`Player 2 won please click on end tournament`) : alert(\"Game Draw\");\n      dispatchGameState({\n        type: 'updateMessage',\n        message: 'Game Tournament Over'\n      });\n    }\n  }\n\n  ; //UNDO\n\n  function undoButtonHandler() {\n    setundoButtonPressed(true);\n    gameState.board[currentMoveRow][currentMoveColumn] = null;\n  }\n\n  console.log(gameState.message); //Start the game\n\n  function initiateGame() {\n    if (gameInitiated === false) {\n      gameInitiated = true;\n      dispatchGameState({\n        type: 'newGame',\n        board: generateNewBoard()\n      });\n    }\n  } //  ============================================================================================================================================================   \n\n\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameApp\",\n    children: [initiateGame(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-half\",\n      children: initialGameState.board.map((d, rowIndex) => {\n        return initialGameState.board[rowIndex].map((value, colIndex) => {\n          var _result4;\n\n          const showRing = ((_result4 = result) === null || _result4 === void 0 ? void 0 : _result4.winningCombination.filter(d => d[0] === rowIndex && d[1] === colIndex).length) > 0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `${rowIndex}${colIndex}`,\n            onClick: () => {\n              console.log({\n                rowIndex,\n                colIndex\n              });\n              play(colIndex);\n            },\n            className: `CirclesWhite ${showRing ? 'winningCombinationRing' : ''}`,\n            children: board[rowIndex][colIndex] === 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img${rowIndex}${colIndex}`,\n              style: {\n                height: '44px',\n                width: '44px',\n                borderRadius: '50%',\n                border: '3px solid #75fc9d'\n              },\n              src: player1Img,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 45\n            }, this) : board[rowIndex][colIndex] === 2 ? /*#__PURE__*/_jsxDEV(\"img\", {\n              id: `img${rowIndex}${colIndex}`,\n              style: {\n                height: '44px',\n                width: '44px',\n                borderRadius: '50%',\n                border: '3px solid #f5d878'\n              },\n              src: player2Img,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 45\n            }, this) : null\n          }, `${rowIndex}${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 36\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-half\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"gamesTournament\",\n        children: \"3 Games Tournament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), showCongratulation ? /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"congratulation\",\n        className: \"congratulation\",\n        children: \"Congratulation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game is going on\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 111\n      }, this), !gameState.gameOver && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"playingGame\",\n        children: [\"Playing Game \", gameNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 42\n      }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"playingGame\",\n        children: gameState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gamePlayers\",\n        children: [/*#__PURE__*/_jsxDEV(GamePlayerCard, {\n          profileImg: player1Img,\n          playerNum: 1,\n          background: \"#DCF6E4\",\n          playerName: player1,\n          score: score1,\n          classForBorder: Player1Class\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GamePlayerCard, {\n          profileImg: player2Img,\n          playerNum: 2,\n          background: \"#F7EFD5\",\n          playerName: player2,\n          score: score2,\n          classForBorder: Player2Class\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), showNewGameButton && /*#__PURE__*/_jsxDEV(Button, {\n        buttonNum: 1,\n        onClick: newGameButtonHandler,\n        buttonText: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 40\n      }, this), !showNewGameButton && /*#__PURE__*/_jsxDEV(Button, {\n        buttonNum: 2,\n        onClick: undoButtonHandler,\n        buttonText: \"Undo Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        buttonNum: 3,\n        onClick: () => {\n          navigate(`/`);\n        },\n        buttonText: \"End Tournament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Connect_4, \"PhbOufLNUcnV0vg9xll34146vfc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Connect_4;\nexport default Connect_4;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect_4\");","map":{"version":3,"sources":["D:/TP/Connect4-reactjs/connect4-reactjs/src/pages/game/Connect_4.tsx"],"names":["GamePlayerCard","Button","useNavigate","useReducer","useState","checkForWin","deepCloneBoard","generateNewBoard","gameInitiated","initialGameState","player1","player2","currentPlayer","board","gameOver","message","gameReducer","state","action","type","nextPlayer","Error","Connect_4","player1Img","player2Img","score1","score2","setScore1","setScore2","gameNumber","setGameNumber","gameState","dispatchGameState","currentMoveRow","setCurrentMoveRow","currentMoveColumn","setCurrentMoveColumn","showCongratulation","setshowCongratulation","showNewGameButton","setshowNewGameButton","undoButtonPressed","setundoButtonPressed","Player1Class","setPlayer1Class","Player2Class","setPlayer2Class","result","play","c","r","console","log","playerWon","displayCongratulationAndButton","currentPlayerUndo","profileImgBorder","newGameButtonHandler","alert","undoButtonHandler","initiateGame","navigate","map","d","rowIndex","value","colIndex","showRing","winningCombination","filter","length","height","width","borderRadius","border"],"mappings":"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","sourcesContent":["import './Connect_4.css';\r\nimport GamePlayerCard from '../../components/GamePlayerCard';\r\nimport Button from '../../components/Button';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport { useReducer, useState } from 'react';\r\nimport { checkForWin, deepCloneBoard, generateNewBoard } from '../../GameLogic';\r\n\r\nlet gameInitiated = false;\r\n\r\nconst initialGameState = {\r\n    player1: 1,\r\n    player2: 2,\r\n    currentPlayer: null,\r\n    board: [\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null],\r\n            [null, null, null, null, null, null, null, null]\r\n           ],\r\n    gameOver: false,\r\n    message: '',\r\n}\r\nconst gameReducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n      case 'newGame':\r\n        return {\r\n          ...initialGameState,\r\n          board: action.board,\r\n        }\r\n      case 'togglePlayer':\r\n        return {\r\n          ...state,\r\n          currentPlayer: action.nextPlayer,\r\n          board: action.board,\r\n        }\r\n      case 'endGame':\r\n        return {\r\n          ...state,\r\n          gameOver: true,\r\n          message: action.message,\r\n          board: action.board,\r\n        }\r\n      case 'updateMessage':\r\n        return {\r\n          ...state,\r\n          message: action.message,\r\n        }\r\n      default:\r\n        throw Error(`Action \"${action.type}\" is not a valid action.`)\r\n    }\r\n}\r\n\r\ninterface ButtonProps{\r\n    player1Img: any; \r\n    player2Img: any;\r\n    player1: string;\r\n    player2: string;\r\n    score1:number;\r\n    score2:number;\r\n    setScore1:any;\r\n    setScore2:any;\r\n    gameNumber:number;\r\n    setGameNumber:any;\r\n}\r\n\r\nfunction Connect_4({player1Img, player2Img, player1, player2, score1, score2, setScore1, setScore2, gameNumber, setGameNumber}:ButtonProps){\r\n    \r\n    const [gameState, dispatchGameState] = useReducer(gameReducer, initialGameState); \r\n    const [currentMoveRow, setCurrentMoveRow] = useState(0);\r\n    const [currentMoveColumn, setCurrentMoveColumn] = useState(0);\r\n    \r\n    const [showCongratulation, setshowCongratulation] = useState(false);\r\n    const [showNewGameButton, setshowNewGameButton] = useState(false);\r\n    const [undoButtonPressed, setundoButtonPressed] = useState(false);\r\n    const [Player1Class, setPlayer1Class] = useState('classForOrangeBorder');\r\n    const [Player2Class, setPlayer2Class] = useState('');\r\n\r\n    let board = deepCloneBoard(gameState.board);\r\n\r\n    let result:any/*{playerWon: 1|2|'draw', winningCombination: Array<Array<number>>}*/= checkForWin(board) ;\r\n\r\n    //triggered when clicked on circle\r\n    const play = (c:number) => {\r\n        if (!gameState.gameOver) {\r\n            board = deepCloneBoard(gameState.board)\r\n            //check if cell is taken by starting at the bottom row and working up\r\n            for (let r = 7; r >= 0; r--) {\r\n                if (!board[r][c]) {\r\n                    board[r][c] = gameState.currentPlayer\r\n                    setCurrentMoveRow(r);\r\n                    setCurrentMoveColumn(c);\r\n                    console.log(board)\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Check status of board\r\n            result = checkForWin(board);\r\n            if (result?.playerWon === gameState.player1) {\r\n                displayCongratulationAndButton();\r\n                setScore1(score1 + 1);\r\n                gameNumber < 4 ? setGameNumber(gameNumber+1) : dispatchGameState({type: 'updateMessage', message: 'Game Tournament Over'});\r\n                dispatchGameState({\r\n                    type: 'endGame',\r\n                    message: 'Player1 (Green) wins!',\r\n                    board,\r\n                })\r\n            } else if (result?.playerWon === gameState.player2) {\r\n                displayCongratulationAndButton();\r\n                setScore2(score2 + 1);\r\n                gameNumber < 4 ? setGameNumber(gameNumber+1) : dispatchGameState({type: 'updateMessage', message: 'Game Tournament Over'});\r\n                dispatchGameState({\r\n                    type: 'endGame',\r\n                    message: 'Player2 (Yellow) wins!',\r\n                    board,\r\n                })\r\n            } else if (result?.playerWon === 'draw') {\r\n                displayCongratulationAndButton();\r\n                gameNumber < 4 ? setGameNumber(gameNumber+1) : dispatchGameState({type: 'updateMessage', message: 'Game Tournament Over'});\r\n                dispatchGameState({\r\n                    type: 'endGame',\r\n                    message: 'Draw Game!',\r\n                    board,\r\n                })\r\n            } else {\r\n                let currentPlayerUndo = gameState.currentPlayer;\r\n                if(undoButtonPressed){\r\n                    const nextPlayer = currentPlayerUndo;\r\n                    profileImgBorder(nextPlayer);\r\n                    dispatchGameState({ type: 'togglePlayer', nextPlayer, board });\r\n                    setundoButtonPressed(false);\r\n                }\r\n                else{\r\n                    const nextPlayer = gameState.currentPlayer === gameState.player1 ? gameState.player2 : gameState.player1;\r\n                    profileImgBorder(nextPlayer);\r\n                    dispatchGameState({ type: 'togglePlayer', nextPlayer, board });\r\n                }\r\n            }\r\n        }\r\n        // it's gameover and a user clicked a cell\r\n        else {\r\n            dispatchGameState({\r\n                type: 'updateMessage',\r\n                message: 'Game Over. Please start a new game.',\r\n            })\r\n        }\r\n    }\r\n\r\n    function profileImgBorder(nextPlayer:number){\r\n        \r\n        if(nextPlayer === 1 ){\r\n            setPlayer1Class('classForOrangeBorder');\r\n            setPlayer2Class('');\r\n        }\r\n        else if(nextPlayer === 2){\r\n            setPlayer1Class('');\r\n            setPlayer2Class('classForOrangeBorder');\r\n        }\r\n    }\r\n\r\n    function displayCongratulationAndButton(){\r\n        setshowCongratulation(true);\r\n        setshowNewGameButton(true);\r\n    }\r\n    //REMOVE EVENT LISTENERS AND DOCUMENT.....================================================================\r\n    //Start new game\r\n        function newGameButtonHandler(){\r\n            if(gameNumber < 4){\r\n                dispatchGameState({ type: 'newGame', board: generateNewBoard() })\r\n                setshowCongratulation(false);\r\n                setshowNewGameButton(false);\r\n            }\r\n            else{\r\n                score1>score2 ? alert(`Player 1 won please click on end tournament`) : (score2>score1 ? alert(`Player 2 won please click on end tournament`) : alert(\"Game Draw\"));\r\n                dispatchGameState({type: 'updateMessage', message: 'Game Tournament Over'});\r\n            }\r\n        };\r\n\r\n        //UNDO\r\n        function undoButtonHandler() {\r\n            setundoButtonPressed(true);\r\n            gameState.board[currentMoveRow][currentMoveColumn] = null;\r\n        }\r\n\r\n    console.log(gameState.message);\r\n\r\n    //Start the game\r\n    function initiateGame(){\r\n        if(gameInitiated === false){\r\n            gameInitiated = true;\r\n            dispatchGameState({ type: 'newGame', board: generateNewBoard()})\r\n        }\r\n    }\r\n    \r\n\r\n//  ============================================================================================================================================================   \r\n    const navigate = useNavigate();\r\n\r\n    return(\r\n        <div className='gameApp'>\r\n            {initiateGame()}\r\n            <div className=\"left-half\">\r\n                {initialGameState.board.map((d,rowIndex)=> {\r\n                        return initialGameState.board[rowIndex].map((value, colIndex)=>{\r\n                            const showRing = result?.winningCombination.filter((d:Array<number>) => d[0]===rowIndex && d[1]===colIndex).length > 0;\r\n                            \r\n                            return <div \r\n                                        id={`${rowIndex}${colIndex}`} \r\n                                        onClick={()=>{console.log({rowIndex, colIndex});  play(colIndex); }} \r\n                                        key={`${rowIndex}${colIndex}`} \r\n                                        className={`CirclesWhite ${showRing ? 'winningCombinationRing' : '' }`}\r\n                                    >\r\n                                        {board[rowIndex][colIndex]===1 ? \r\n                                            <img \r\n                                            id={`img${rowIndex}${colIndex}`} \r\n                                            style={{height: '44px', width: '44px', borderRadius: '50%', border: '3px solid #75fc9d'}} \r\n                                            src={player1Img} \r\n                                            alt=\"\" \r\n                                            /> : \r\n                                        (board[rowIndex][colIndex]===2 ? \r\n                                            <img \r\n                                            id={`img${rowIndex}${colIndex}`} \r\n                                            style={{height: '44px', width: '44px', borderRadius: '50%', border: '3px solid #f5d878'}} \r\n                                            src={player2Img} \r\n                                            alt=\"\" \r\n                                            />: \r\n                                        null)\r\n                                        }\r\n                                        {/* {rowIndex} {value} {colIndex}  */}\r\n                                </div>\r\n                            })\r\n                        }\r\n                    )}\r\n            </div>\r\n            \r\n            <div className='right-half'>\r\n                <h2 className='gamesTournament'>3 Games Tournament</h2>\r\n                {showCongratulation ? <p id='congratulation' className='congratulation'>Congratulation!</p> : <p>Game is going on</p>}\r\n                { !gameState.gameOver && <h3 className='playingGame'>Playing Game {gameNumber}</h3> }\r\n                { gameState.gameOver && <h3 className='playingGame'>{gameState.message}</h3> }\r\n                <div className='gamePlayers'>\r\n                    <GamePlayerCard \r\n                        profileImg={player1Img}\r\n                        playerNum={1}\r\n                        background=\"#DCF6E4\" \r\n                        playerName={player1}\r\n                        score={score1}\r\n                        classForBorder={Player1Class}\r\n                    />\r\n                    \r\n                    <GamePlayerCard \r\n                        profileImg={player2Img}\r\n                        playerNum={2}\r\n                        background=\"#F7EFD5\" \r\n                        playerName={player2}\r\n                        score={score2}\r\n                        classForBorder={Player2Class}\r\n                    />\r\n                </div>\r\n                <hr />\r\n                { showNewGameButton && <Button buttonNum={1} onClick={newGameButtonHandler} buttonText='New Game'/> }\r\n                { !showNewGameButton && <Button buttonNum={2} onClick={undoButtonHandler} buttonText=\"Undo Step\"/>}\r\n                <Button buttonNum={3} onClick={()=>{navigate(`/`)}} buttonText=\"End Tournament\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Connect_4;"]},"metadata":{},"sourceType":"module"}